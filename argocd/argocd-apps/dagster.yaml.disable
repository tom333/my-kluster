apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: dagster
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: dagster
    server: https://kubernetes.default.svc
  project: infra-project
  source:
    repoURL: https://dagster-io.github.io/helm
    targetRevision: 1.11.16
    chart: dagster
    helm:
      values: |
        ingress:
          enabled: true
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
            nginx.ingress.kubernetes.io/auth-url: "https://auth.tgu.ovh/oauth2/auth"
            nginx.ingress.kubernetes.io/auth-signin: "https://auth.tgu.ovh/oauth2/start?rd=https://dagster.tgu.ovh"
          dagsterWebserver:
            host: dagster.tgu.ovh
            path: /
            pathType: Prefix
            tls:
              enabled: true
              secretName: dagster-tls
        dagsterWebserver:
          workspace:
            enabled: false
        dagster-user-deployments:
          enabled: true
          deployments: 
            - name: "rcs2bq"
              image:
                repository: "localhost:32000/rcs2bq"
                tag: "latest"
                pullPolicy: Always
              dagsterApiGrpcArgs:
                - "--python-file"
                - "definitions.py"
                - "--host"
                - "0.0.0.0"
                - "--port"
                - "4000"
              port: 4000
              locationName: "rcs2bq" # Nom affiché dans l'interface Dagster
            - name: "my-first-job-deployment" # Nom unique pour votre déploiement de code utilisateur
              image:
                repository: "localhost:32000/poc-lean-datastack-image" # Le chemin de votre image Docker
                tag: "latest"                  # Le tag de la dernière version de votre image
                pullPolicy: Always
              dagsterApiGrpcArgs:
                - "--python-file"
                - "definitions.py"
                - "--host"
                - "0.0.0.0"
                - "--port"
                - "4000"
              port: 4000
              locationName: "mon-super-job-dagster" # Nom affiché dans l'interface Dagster
              env:
                - name: DAGSTER_INSTANCE_HEARTBEAT_INTERVAL
                  value: "10"
                - name: POSTGRES_DB
                  value: "data"
                - name: POSTGRES_HOST
                  value: "postgresql.datalab.svc.cluster.local"
                - name: POSTGRES_USER
                  value: "data"
                - name: POSTGRES_PASSWORD
                  value: "data"
                - name: POSTGRES_PORT
                  value: "5432"
                - name: MINIO_ACCESS_KEY
                  value: "moi"
                - name: MINIO_SECRET_KEY
                  value: "Emilie-1"
                - name: MINIO_ENDPOINT
                  value: "minio.tgu.ovh"
                - name: MINIO_REGION
                  value: "europe-west1"
                - name: MINIO_USE_SSL
                  value: "true"
                - name: DUCKLAKE_CATALOG
                  value: "poc"
            # - name: "k8s-example-user-code-1"
              # image:
              #   # When a tag is not supplied, it will default as the Helm chart version.
              #   repository: "docker.io/dagster/user-code-example"
              #   tag: ~

              #   # Change with caution! If you're using a fixed tag for pipeline run images, changing the
              #   # image pull policy to anything other than "Always" will use a cached/stale image, which is
              #   # almost certainly not what you want.
              #   pullPolicy: Always

              # # Arguments to `dagster api grpc`.
              # # Ex: "dagster api grpc -m dagster_test.test_project.test_jobs.repo -a define_demo_execution_repo"
              # # would translate to:
              # # dagsterApiGrpcArgs:
              # #   - "-m"
              # #   - "dagster_test.test_project.test_jobs.repo"
              # #   - "-a"
              # #   - "define_demo_execution_repo"
              # #
              # # The `dagsterApiGrpcArgs` key can also be replaced with `codeServerArgs` to use a new
              # # experimental `dagster code-server start` command instead of `dagster api grpc`, which can
              # # reload its definitions from within the Dagster UI without needing to restart the user code
              # # deployment pod.
              # dagsterApiGrpcArgs:
              #   - "--python-file"
              #   - "/example_project/example_repo/repo.py"
              # port: 3030

              # # Whether or not to include configuration specified for this user code deployment in the pods
              # # launched for runs from that deployment
              # includeConfigInLaunchedRuns:
              #   enabled: true

              # # Additional environment variables to set.
              # # These will be directly applied to the daemon container. See
              # # https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
              # #
              # # Example:
              # #
              # # env:
              # # - name: ENV_ONE
              # #   value: "one"
              # # - name: ENV_TWO
              # #   value: "two"
              # env: []

              # # Additional environment variables can be retrieved and set from ConfigMaps. See:
              # # https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
              # #
              # # Example:
              # #
              # # envConfigMaps:
              # #   - name: config-map
              # envConfigMaps: []

              # # Additional environment variables can be retrieved and set from Secrets. See:
              # # https://kubernetes.io/docs/concepts/configuration/secret/#use-case-as-container-environment-variables
              # #
              # # Example:
              # #
              # # envSecrets:
              # #   - name: secret
              # envSecrets: []

              # # Additional labels that should be included. See:
              # # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
              # #
              # # Example:
              # # labels:
              # #   my-label-key: my_label-value
              # labels: {}

              # # Additional volumes that should be included. See:
              # # https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#volume-v1-core
              # #
              # # Example:
              # #
              # # volumes:
              # #   - name: my-volume
              # #     configMap: my-config-map
              # volumes: []

              # # Additional volume mounts that should be included. See:
              # # See: https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#volumemount-v1-core
              # #
              # # Example:
              # #
              # # volumeMounts:
              # #   - name: test-volume
              # #     mountPath: /opt/dagster/test_folder
              # #     subPath: test_file.yaml
              # volumeMounts: []

              # # Init containers to run before the main container. See:
              # # https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
              # initContainers: []

              # # Additional containers (i.e. sidecars) to run alongside the main container. See:
              # # https://kubernetes.io/docs/concepts/workloads/pods/sidecar-containers/
              # #
              # # Example:
              # #
              # # sidecarContainers:
              # #   - name: my-sidecar
              # #     image: ...
              # #     volumeMounts: []
              # #     env: []
              # sidecarContainers: []

              # annotations: {}
              # nodeSelector: {}
              # affinity: {}
              # tolerations: []
              # podSecurityContext: {}
              # securityContext: {}
              # resources: {}

              # # Override the default K8s scheduler
              # # schedulerName: ~

              # # Readiness probe detects when the pod is ready to serve requests.
              # # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes
              # readinessProbe:
              #   # Readiness probes are enabled by default.
              #   enabled: true
              #   # If `readinessProbe` has no `exec` field, then the following default will be used:
              #   # exec:
              #   #   command: ["dagster", "api", "grpc-health-check", "-p", "{{ $deployment.port }}"]
              #   periodSeconds: 20
              #   timeoutSeconds: 10
              #   successThreshold: 1
              #   # Allow roughly 300 seconds to start up by default
              #   failureThreshold: 15
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
    automated:
      selfHeal: true
      prune: true
